[{"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\index.tsx":"1","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\App.tsx":"2","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\Router.tsx":"3","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Contexts\\ActiveUserContext.tsx":"4","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\config\\Api.ts":"5","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\AuthorityService.ts":"6","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\UserService.ts":"7","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\PrivateRoute.tsx":"8","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\HomePage.tsx":"9","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"10","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\UserList.tsx":"11","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\ManageGroups.tsx":"12","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Organism\\AdminPageNav.tsx":"13","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\GroupUserPage.tsx":"14","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\GroupInspect.tsx":"15","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Organism\\EditUser.tsx":"16","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Organism\\EditAddGroup.tsx":"17","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\UserDisplay.tsx":"18","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\GroupDisplay.tsx":"19","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\ActiveButton.tsx":"20","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\Navigation\\AdminNav.tsx":"21","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\Text.tsx":"22","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\Navigation\\Navbar.tsx":"23","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\TextInput.tsx":"24","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\RoundImg.tsx":"25"},{"size":382,"mtime":1669274465651,"results":"26","hashOfConfig":"27"},{"size":316,"mtime":1669274465623,"results":"28","hashOfConfig":"27"},{"size":2520,"mtime":1669275163044,"results":"29","hashOfConfig":"27"},{"size":6270,"mtime":1669275163047,"results":"30","hashOfConfig":"27"},{"size":1864,"mtime":1669275163047,"results":"31","hashOfConfig":"27"},{"size":1171,"mtime":1669276390013,"results":"32","hashOfConfig":"27"},{"size":801,"mtime":1669276438440,"results":"33","hashOfConfig":"27"},{"size":2296,"mtime":1669275163054,"results":"34","hashOfConfig":"27"},{"size":195,"mtime":1669275163160,"results":"35","hashOfConfig":"27"},{"size":3288,"mtime":1669275163246,"results":"36","hashOfConfig":"27"},{"size":2576,"mtime":1669275074578,"results":"37","hashOfConfig":"27"},{"size":3743,"mtime":1669275074578,"results":"38","hashOfConfig":"27"},{"size":273,"mtime":1669275163159,"results":"39","hashOfConfig":"27"},{"size":3779,"mtime":1669275074568,"results":"40","hashOfConfig":"27"},{"size":3671,"mtime":1669275074452,"results":"41","hashOfConfig":"27"},{"size":2798,"mtime":1669276075130,"results":"42","hashOfConfig":"27"},{"size":3363,"mtime":1669276062882,"results":"43","hashOfConfig":"27"},{"size":1552,"mtime":1669275163152,"results":"44","hashOfConfig":"27"},{"size":1410,"mtime":1669275163152,"results":"45","hashOfConfig":"27"},{"size":513,"mtime":1669275163157,"results":"46","hashOfConfig":"27"},{"size":507,"mtime":1669275163246,"results":"47","hashOfConfig":"27"},{"size":910,"mtime":1669275163152,"results":"48","hashOfConfig":"27"},{"size":707,"mtime":1669275163246,"results":"49","hashOfConfig":"27"},{"size":495,"mtime":1669275163159,"results":"50","hashOfConfig":"27"},{"size":308,"mtime":1669275163155,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4ijd62",{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\index.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\App.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\Router.tsx",["109","110"],"import { Route, Routes } from \"react-router-dom\";\r\nimport LoginPage from \"../components/pages/LoginPage/LoginPage\";\r\n\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport HomePage from \"../components/pages/HomePage\";\r\n\r\nimport { GroupUserPage } from \"../components/pages/GroupUserPage\";\r\n\r\nimport ManageGroups from \"../components/pages/ManageGroups\";\r\nimport { GroupInspect } from \"../components/pages/GroupInspect\";\r\nimport { TOKEN_LOCAL_STORAGE_KEY } from \"../Contexts/ActiveUserContext\";\r\nimport AdminPageNav from \"../components/Organism/AdminPageNav\";\r\nimport { UserList } from \"../components/pages/UserList\";\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\nconst adminAuthorities = [\r\n  \"USER_CREATE\",\r\n  \"USER_READ\",\r\n  \"USER_DELETE\",\r\n  \"USER_MODIFY\",\r\n];\r\n\r\nconst Router = () => {\r\n  //const { checkRole } = useContext(ActiveUserContext);\r\n\r\n  /** navigate to different \"home\"-locations depending on Role the user have */\r\n  return (\r\n    <Routes>\r\n      <Route path={\"/\"} element={<HomePage />} />\r\n      <Route path={\"/login\"} element={<LoginPage />} />\r\n      <Route path={\"/group\"} element={<GroupUserPage />} />\r\n      <Route path={\"/group/:groupId\"} element={<GroupInspect />} />\r\n      //admin route\r\n      <Route\r\n        path={\"/admin\"}\r\n        element={\r\n          <PrivateRoute\r\n            authorities={adminAuthorities}\r\n            element={<AdminPageNav />}\r\n          />\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/admin/group\"}\r\n        element={\r\n          <PrivateRoute\r\n            authorities={adminAuthorities}\r\n            element={<ManageGroups />}\r\n          />\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/admin/user\"}\r\n        element={\r\n          <PrivateRoute authorities={adminAuthorities} element={<UserList />} />\r\n        }\r\n      />\r\n      <Route\r\n        path={\"/users\"}\r\n        element={\r\n          <PrivateRoute authorities={[]} element={<div>nothing here</div>} />\r\n        }\r\n      />\r\n      <Route\r\n        path=\"/users/:userId\"\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[\"ADMIN\"]}\r\n            element={<div>nothing here</div>}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path=\"/profile\"\r\n        element={\r\n          <PrivateRoute\r\n            authorities={[]}\r\n            element={<div>nothing here</div>}\r\n          ></PrivateRoute>\r\n        }\r\n      />\r\n      <Route path=\"*\" element={<div>Not Found</div>} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Contexts\\ActiveUserContext.tsx",["111"],"import { createContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res.data);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\config\\Api.ts",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\AuthorityService.ts",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Services\\UserService.ts",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\Router\\PrivateRoute.tsx",["112","113","114"],"import React, { useContext } from \"react\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport * as jwt from \"jsonwebtoken\";\r\nimport ActiveUserContext, {\r\n  TOKEN_LOCAL_STORAGE_KEY,\r\n} from \"../Contexts/ActiveUserContext\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport { Authority } from \"../types/models/Authority.model\";\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: string[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities: authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem(\"token\");\r\n    if (!tokenString) {\r\n      console.error(\"no token found\");\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace(\"Bearer \", \"\");\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to=\"/login\" replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to=\"/unauthorized\" replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    // Pagelayout puts the Navigation, Menu etc. around the component\r\n    RouteComponent\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\HomePage.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\UserList.tsx",["115","116"],"import api from \"../../config/Api\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { User } from \"../../types/Database/User\";\r\nimport { Group } from \"../../types/Database/Group\";\r\nimport { UserDisplay } from \"../Molecules/UserDisplay\";\r\nimport AdminPageNav from \"../Organism/AdminPageNav\";\r\nimport EditUser from \"../Organism/EditUser\";\r\n\r\n//Page where an admin can view and edit limit userdata.\r\nexport function UserList() {\r\n  const [users, setUsers] = useState<User[]>();\r\n  const [groupMap, setGroupMap] = useState<Map<string, Group>>();\r\n  const [input, setInput] = useState<Number | String>(\"\");\r\n\r\n  let inputElement = generateInputElement();\r\n\r\n  useEffect(() => {\r\n    const getGroups = async function () {\r\n      api({\r\n        method: \"GET\",\r\n        url: \"http://${process.env.REACT_APP_BASEURL}/group\",\r\n      })\r\n        .then((res) => {\r\n          let map = new Map<string, Group>();\r\n          res.data.forEach((group: Group) => {\r\n            map.set(group.id!, group);\r\n          });\r\n          setGroupMap(map);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    };\r\n\r\n    getGroups();\r\n    getUsers();\r\n  }, []);\r\n\r\n  if (users) {\r\n    return (\r\n      <div>\r\n        <AdminPageNav />\r\n        <div>{inputElement}</div>\r\n        <div style={flex}>\r\n          {users.map((user: User, index: Number) => {\r\n            return (\r\n              <div style={displayContainer} onClick={() => setInput(index)}>\r\n                <UserDisplay\r\n                  username={user.firstName + \" \" + user.lastName}\r\n                  userId={user.id}\r\n                  email={user.email}\r\n                  group={groupMap?.get(user.group?.id!)?.groupName}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n\r\n  function quitInput() {\r\n    setInput(\"\");\r\n  }\r\n\r\n  async function getUsers() {\r\n    api({\r\n      method: \"GET\",\r\n      url: \"http://${process.env.REACT_APP_BASEURL}/user\",\r\n    })\r\n      .then((res) => {\r\n        setUsers(res.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function generateInputElement() {\r\n    if (users && typeof input == \"number\") {\r\n      return (\r\n        <EditUser user={users[input]} quit={quitInput} reload={getUsers} />\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst flex: React.CSSProperties = {\r\n  display: \"grid\",\r\n  gridTemplateColumns: \"1fr 1fr 1fr 1fr\",\r\n  gap: \"10px\",\r\n  flex: 4,\r\n};\r\n\r\nconst displayContainer: React.CSSProperties = {\r\n  marginBottom: \"2vh\",\r\n};\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\ManageGroups.tsx",["117","118"],"import api from \"../../config/Api\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Group } from \"../../types/Database/Group\";\r\nimport { GroupDisplay } from \"../Molecules/GroupDisplay\";\r\nimport { Text } from \"../Atoms/Text\";\r\nimport EditAddGroup from \"../Organism/EditAddGroup\";\r\nimport AdminPageNav from \"../Organism/AdminPageNav\";\r\n\r\n//Page where an admin can manage groups(View,Add,edit,delete)\r\nexport default function ManageGroups() {\r\n  const [groups, setGroups] = useState<[Group]>();\r\n  const [input, setInput] = useState(\"\");\r\n  useEffect(() => {\r\n    getGroups();\r\n  }, []);\r\n\r\n  let groupsElement = generateGroupsElement();\r\n  let inputElement = generateInputElement();\r\n\r\n  return (\r\n    <>\r\n      <AdminPageNav />\r\n      <div style={root}>\r\n        <button onClick={() => openInputField(\"add\")}>Add a new Group</button>\r\n        <div style={flex}>\r\n          <div>{groupsElement}</div>\r\n          <div style={rightItem}>{inputElement}</div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  function generateGroupsElement() {\r\n    if (groups) {\r\n      return groups.map((value: Group, index: Number) => {\r\n        return (\r\n          <div className={\"group\"} style={flex}>\r\n            <div>\r\n              <button\r\n                className={\"edit_button\"}\r\n                style={button}\r\n                onClick={() => openInputField(value.id!)}\r\n              >\r\n                Edit: {value.groupName}\r\n              </button>\r\n              <br />\r\n              <button\r\n                className={\"delete_button\"}\r\n                style={button}\r\n                onClick={() => deleteGroup(value.id!)}\r\n              >\r\n                Delete: {value.groupName}\r\n              </button>\r\n            </div>\r\n            <div>\r\n              <GroupDisplay\r\n                name={value.groupName}\r\n                motto={value.groupMotto}\r\n                logo={value.groupLogo}\r\n              />\r\n            </div>\r\n            <div></div>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      return <Text text=\"No existing groups found\" />;\r\n    }\r\n  }\r\n\r\n  function generateInputElement() {\r\n    let group: Group = getGroupById(input)!;\r\n    switch (input) {\r\n      case \"\":\r\n        return <></>;\r\n      case \"add\":\r\n        return <EditAddGroup quit={quitInput} reload={getGroups} />;\r\n      default:\r\n        return (\r\n          <EditAddGroup group={group} quit={quitInput} reload={getGroups} />\r\n        );\r\n    }\r\n  }\r\n  function openInputField(target: string) {\r\n    setInput(target);\r\n  }\r\n\r\n  function getGroupById(id: string): Group | undefined {\r\n    if (groups) {\r\n      for (let i = 0; i < groups.length; i++) {\r\n        if (groups[i].id === id) {\r\n          return groups[i];\r\n        }\r\n      }\r\n    } else if (input !== \"\") {\r\n      setInput(\"\");\r\n      return;\r\n    }\r\n  }\r\n  function quitInput() {\r\n    setInput(\"\");\r\n  }\r\n\r\n  async function getGroups() {\r\n    api({\r\n      method: \"GET\",\r\n      url: \"http://${process.env.REACT_APP_BASEURL}/group\",\r\n    })\r\n      .then((res) => {\r\n        setGroups(res.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  function deleteGroup(groupId: string) {\r\n    api({\r\n      method: \"DELETE\",\r\n      url: \"http://${process.env.REACT_APP_BASEURL}/group/\" + groupId,\r\n    })\r\n      .then((res) => {\r\n        getGroups();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n}\r\n\r\nconst flex: React.CSSProperties = {\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst button: React.CSSProperties = {\r\n  width: \"17.5vw\",\r\n  marginRight: \"2vw\",\r\n};\r\n\r\nconst rightItem: React.CSSProperties = {\r\n  marginLeft: \"10vw\",\r\n};\r\n\r\nconst root: React.CSSProperties = {\r\n  margin: \"3vw\",\r\n};\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Organism\\AdminPageNav.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\GroupUserPage.tsx",["119","120","121","122"],"import api from \"../../config/Api\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { ActiveButton } from \"../Atoms/ActiveButton\";\r\nimport { GroupDisplay } from \"../Molecules/GroupDisplay\";\r\nimport { User } from \"../../types/Database/User\";\r\nimport { Group } from \"../../types/Database/Group\";\r\nimport { TOKEN_LOCAL_STORAGE_KEY } from \"../../Contexts/ActiveUserContext\";\r\nimport { decode } from \"jsonwebtoken\";\r\nimport Navbar from \"../Molecules/Navigation/Navbar\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n//Displays all groups and lets the user switch in which group he is in\r\nexport function GroupUserPage() {\r\n  const [groups, setGroups] = useState<Group[]>();\r\n  const [user, setUser] = useState<User>();\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    //gets all groups\r\n    const getGroups = async function () {\r\n      api({\r\n        method: \"GET\",\r\n        url: \"http://${process.env.REACT_APP_BASEURL}/group\",\r\n      })\r\n        .then((res) => {\r\n          setGroups(res.data);\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    };\r\n\r\n    //gets the logged in user\r\n    const getUser = async function () {\r\n      api({\r\n        method: \"GET\",\r\n        url: \"http://${process.env.REACT_APP_BASEURL}/user/\" + getUserId(),\r\n      })\r\n        .then((res) => {\r\n          if (typeof res.data == \"string\") {\r\n            navigate(\"/login\");\r\n          } else {\r\n            setUser(res.data);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    };\r\n\r\n    getUser();\r\n    getGroups();\r\n  }, []);\r\n\r\n  if (groups && user) {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        {groups.map((group: Group, index: Number) => {\r\n          return (\r\n            <div style={flex}>\r\n              <div style={buttonSize}>\r\n                <ActiveButton\r\n                  isActive={group.id === user.group?.id}\r\n                  onClick={() => changeSubscription(group.id!)}\r\n                />\r\n              </div>\r\n              <div>\r\n                <a style={removeATagStyle} href={\"/group/\" + group.id}>\r\n                  <GroupDisplay\r\n                    name={group.groupName}\r\n                    motto={group.groupMotto}\r\n                    logo={group.groupLogo}\r\n                  />\r\n                </a>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return <></>;\r\n  }\r\n\r\n  //changes the current group subscription of the user\r\n  function changeSubscription(newgroup: string | null) {\r\n    //sets the new group to null if the user is allready in the group\r\n    //this allows the user to leave the group\r\n    if (newgroup === user?.group?.id!) {\r\n      newgroup = null;\r\n    }\r\n\r\n    let userCopy: User = {\r\n      firstName: user?.firstName!,\r\n      lastName: user?.lastName!,\r\n      email: user?.email!,\r\n      id: user?.id!,\r\n      group: { id: newgroup },\r\n    };\r\n\r\n    api({\r\n      method: \"PUT\",\r\n      url: \"http://${process.env.REACT_APP_BASEURL}/user/\",\r\n      data: {\r\n        userId: user?.id,\r\n        groupId: newgroup,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setUser(userCopy);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n}\r\n\r\n//gets the user id from the token\r\nfunction getUserId() {\r\n  const bearerToken = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n  const token = bearerToken?.split(\" \")[1];\r\n  const decodedToken = decode(token!);\r\n  return decodedToken?.sub;\r\n}\r\n\r\nconst buttonSize: React.CSSProperties = {\r\n  width: \"3.5vw\",\r\n};\r\n\r\nconst flex: React.CSSProperties = {\r\n  display: \"flex\",\r\n  marginBottom: \"0.3vh\",\r\n};\r\n\r\nconst removeATagStyle: React.CSSProperties = {\r\n  color: \"inherit\",\r\n  textDecoration: \"inherit\",\r\n};\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\pages\\GroupInspect.tsx",["123","124","125","126"],"import { Group } from \"../../types/Database/Group\";\r\nimport api from \"../../config/Api\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { GroupDisplay } from \"../Molecules/GroupDisplay\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { User } from \"../../types/Database/User\";\r\nimport { Text } from \"../Atoms/Text\";\r\nimport { UserDisplay } from \"../Molecules/UserDisplay\";\r\nimport Navbar from \"../Molecules/Navigation/Navbar\";\r\n\r\n//Allows to inspect a groups details if the user is in the group or is an admin.\r\nexport function GroupInspect() {\r\n  let { groupId } = useParams();\r\n  const [group, setGroup] = useState<Group>();\r\n  const [users, setUsers] = useState<User[]>();\r\n  const [page, setPage] = useState<number>(1);\r\n  const [imagesPerPage, setImagesPerPage] = useState<number>(5);\r\n  let usersElement;\r\n  let errorElement;\r\n\r\n  //gets all groups from the server\r\n  async function getGroup() {\r\n    api({\r\n      method: \"GET\",\r\n      url: \"http://${process.env.REACT_APP_BASEURL}/group/\" + groupId,\r\n    })\r\n      .then((res) => {\r\n        setGroup({\r\n          id: res.data.id,\r\n          groupName: res.data.groupName,\r\n          groupMotto: res.data.groupMotto,\r\n          groupLogo: res.data.groupLogo,\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  //gets all users from a group with pagination\r\n  async function getUsers() {\r\n    api({\r\n      method: \"GET\",\r\n      url:\r\n        \"http://${process.env.REACT_APP_BASEURL}/group/members/\" +\r\n        groupId +\r\n        \"?page=\" +\r\n        (page - 1) +\r\n        \"&size=\" +\r\n        imagesPerPage,\r\n    })\r\n      .then((res) => {\r\n        setUsers(res.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    getGroup();\r\n    getUsers();\r\n  }, []);\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, [page, imagesPerPage]);\r\n\r\n  usersElement = generateUsersElement();\r\n  errorElement = <h1 style={white}>You do not have access to this group</h1>;\r\n  if (group) {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <div>\r\n          <GroupDisplay\r\n            otherDisplay={true}\r\n            logo={group.groupLogo}\r\n            motto={group.groupMotto}\r\n            name={group.groupName}\r\n          />\r\n        </div>\r\n        <input\r\n          style={pageStyle}\r\n          type=\"number\"\r\n          value={imagesPerPage + \"\"}\r\n          onChange={(e) => changeNumOfImages(Number.parseInt(e.target.value))}\r\n        />\r\n        <div>\r\n          <button onClick={decrementPage}>&lt;--</button>\r\n          <input style={pageStyle} type=\"number\" value={page} />\r\n          <button onClick={incrementPage}>--&gt;</button>\r\n        </div>\r\n        <div>{usersElement}</div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Navbar />\r\n        {errorElement}\r\n      </>\r\n    );\r\n  }\r\n  function decrementPage() {\r\n    if (page !== 1) {\r\n      setPage(page - 1);\r\n    }\r\n  }\r\n\r\n  function incrementPage() {\r\n    setPage(page + 1);\r\n  }\r\n\r\n  function generateUsersElement() {\r\n    if (users) {\r\n      return (\r\n        <div>\r\n          {users.map((user) => {\r\n            return (\r\n              <div>\r\n                <UserDisplay username={user.firstName + \" \" + user.lastName} />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    } else {\r\n      return <Text text=\"No user has joined this group yet!\" />;\r\n    }\r\n  }\r\n  function changeNumOfImages(newImageNumber: number) {\r\n    setImagesPerPage(newImageNumber);\r\n  }\r\n}\r\n\r\nconst pageStyle: React.CSSProperties = {\r\n  width: \"5vw\",\r\n};\r\n\r\nconst white: React.CSSProperties = {\r\n  color: \"white\",\r\n};\r\n","C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Organism\\EditUser.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Organism\\EditAddGroup.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\UserDisplay.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\GroupDisplay.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\ActiveButton.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\Navigation\\AdminNav.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\Text.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Molecules\\Navigation\\Navbar.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\TextInput.tsx",[],"C:\\Users\\Manuel\\Documents\\.Module\\uk223\\frontend\\src\\components\\Atoms\\RoundImg.tsx",[],{"ruleId":"127","severity":1,"message":"128","line":11,"column":10,"nodeType":"129","messageId":"130","endLine":11,"endColumn":33},{"ruleId":"131","severity":1,"message":"132","line":33,"column":68,"nodeType":"133","messageId":"134","endLine":35,"endColumn":7},{"ruleId":"135","severity":1,"message":"136","line":171,"column":6,"nodeType":"137","endLine":171,"endColumn":8,"suggestions":"138"},{"ruleId":"127","severity":1,"message":"128","line":5,"column":3,"nodeType":"129","messageId":"130","endLine":5,"endColumn":26},{"ruleId":"127","severity":1,"message":"139","line":8,"column":10,"nodeType":"129","messageId":"130","endLine":8,"endColumn":19},{"ruleId":"140","severity":1,"message":"141","line":22,"column":3,"nodeType":"142","messageId":"143","endLine":22,"endColumn":27,"fix":"144"},{"ruleId":"145","severity":1,"message":"146","line":21,"column":14,"nodeType":"147","messageId":"148","endLine":21,"endColumn":61},{"ruleId":"145","severity":1,"message":"146","line":71,"column":12,"nodeType":"147","messageId":"148","endLine":71,"endColumn":58},{"ruleId":"145","severity":1,"message":"146","line":107,"column":12,"nodeType":"147","messageId":"148","endLine":107,"endColumn":59},{"ruleId":"145","severity":1,"message":"146","line":120,"column":12,"nodeType":"147","messageId":"148","endLine":120,"endColumn":60},{"ruleId":"145","severity":1,"message":"146","line":22,"column":14,"nodeType":"147","messageId":"148","endLine":22,"endColumn":61},{"ruleId":"145","severity":1,"message":"146","line":36,"column":14,"nodeType":"147","messageId":"148","endLine":36,"endColumn":61},{"ruleId":"135","severity":1,"message":"149","line":52,"column":6,"nodeType":"137","endLine":52,"endColumn":8,"suggestions":"150"},{"ruleId":"145","severity":1,"message":"146","line":103,"column":12,"nodeType":"147","messageId":"148","endLine":103,"endColumn":59},{"ruleId":"145","severity":1,"message":"146","line":25,"column":12,"nodeType":"147","messageId":"148","endLine":25,"endColumn":60},{"ruleId":"145","severity":1,"message":"146","line":45,"column":9,"nodeType":"147","messageId":"148","endLine":45,"endColumn":65},{"ruleId":"135","severity":1,"message":"151","line":63,"column":6,"nodeType":"137","endLine":63,"endColumn":8,"suggestions":"152"},{"ruleId":"135","severity":1,"message":"153","line":66,"column":6,"nodeType":"137","endLine":66,"endColumn":27,"suggestions":"154"},"@typescript-eslint/no-unused-vars","'TOKEN_LOCAL_STORAGE_KEY' is defined but never used.","Identifier","unusedVar","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'Authority' is defined but never used.","no-useless-rename","Destructuring assignment authorities unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"156","text":"157"},"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.",["158"],"React Hook useEffect has missing dependencies: 'getGroup' and 'getUsers'. Either include them or remove the dependency array.",["159"],"React Hook useEffect has a missing dependency: 'getUsers'. Either include it or remove the dependency array.",["160"],{"desc":"161","fix":"162"},[562,586],"authorities",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"Update the dependencies array to be: [loadActiveUser]",{"range":"169","text":"170"},"Update the dependencies array to be: [navigate]",{"range":"171","text":"172"},"Update the dependencies array to be: [getGroup, getUsers]",{"range":"173","text":"174"},"Update the dependencies array to be: [page, imagesPerPage, getUsers]",{"range":"175","text":"176"},[5514,5516],"[loadActiveUser]",[1603,1605],"[navigate]",[1822,1824],"[getGroup, getUsers]",[1871,1892],"[page, imagesPerPage, getUsers]"]